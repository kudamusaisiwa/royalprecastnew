rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function hasRole(roles) {
      return isAuthenticated() && 
        getUserRole() in roles;
    }

    function isValidOrder() {
      return request.resource.data.keys().hasAll([
        'id', 'createdBy', 'creatorRole', 'createdAt', 'status', 
        'totalAmount', 'products'
      ]) &&
      request.resource.data.createdBy == request.auth.uid &&
      request.resource.data.totalAmount is number &&
      request.resource.data.products is list;
    }

    function isValidCustomer() {
      return request.resource.data.keys().hasAll([
        'name', 'email', 'phone', 'createdBy', 'createdAt'
      ]) &&
      request.resource.data.createdBy == request.auth.uid &&
      request.resource.data.name is string &&
      request.resource.data.email is string;
    }

    function isValidProduct() {
      return request.resource.data.keys().hasAll([
        'name', 'price', 'category', 'description'
      ]) &&
      request.resource.data.price is number;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if hasRole(['admin']);
      allow delete: if hasRole(['admin']);
    }

    // Orders Collection
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if hasRole(['admin', 'manager', 'finance']) && 
        isValidOrder();
      allow update: if hasRole(['admin', 'manager', 'finance', 'staff']);
      allow delete: if hasRole(['admin', 'manager']);
    }

    // Customers Collection
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow create: if hasRole(['admin', 'manager', 'finance']) && 
        isValidCustomer();
      allow update: if hasRole(['admin', 'manager', 'finance']);
      allow delete: if hasRole(['admin', 'manager']);
    }

    // Products Collection
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create, update: if hasRole(['admin', 'manager']) && 
        isValidProduct();
      allow delete: if hasRole(['admin']);
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated();
      allow create: if hasRole(['admin', 'manager', 'finance']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if hasRole(['admin', 'manager', 'finance']);
      allow delete: if hasRole(['admin', 'manager']);
    }

    // Activities Collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if hasRole(['admin']);
    }
  }
}